syntax = "proto3";

package vote;
option go_package = "./;vote";

// SearchI is the input for searching votes.
//
//     {
//         "filter": {
//             "paging": {
//                 "kind": "page",
//                 "start": "0",
//                 "stop": "49"
//             }
//         },
//         "object": [
//             {
//                 "intern": {
//                     "owner": "551265"
//                 }
//             }
//         ]
//     }
//
message SearchI {
  SearchI_Filter filter = 100;
  repeated SearchI_Object object = 200;
}

message SearchI_Filter {
  SearchI_Filter_Paging paging = 100;
}

message SearchI_Filter_Paging {
  string kind = 100;
  string start = 200;
  string stop = 300;
}

message SearchI_Object {
  SearchI_Object_Intern intern = 100;
  SearchI_Object_Public public = 200;
  SearchI_Object_Symbol symbol = 300;
}

message SearchI_Object_Intern {
  // id is the ID of the vote object being searched. If searching for a
  // particular ID, the search query object must not contain any other fields.
  string id = 100;
  // owner is the ID of the user having created the votes being searched. If
  // searching for votes created by a particular owner, the search query object
  // may also define public.kind.
  string owner = 200;
}

message SearchI_Object_Public {
  // kind is the type of vote, e.g. "stake" or "truth" on which a vote is cast.
  // Note that kind must be compliant with the lifecycle of the referenced
  // claim.
  //
  //     "stake" defines votes for users expressing their own opinions. A vote
  //     may have set kind "stake" to express opinions on claims of either kind
  //     "adjourn", "dispute", "nullify" or "propose".
  //
  //     "truth" defines votes for users verifying real world events. A vote may
  //     have set kind "stake" to verify real events on claims of kind
  //     "resolve".
  //
  string kind = 100;
}

message SearchI_Object_Symbol {}

// SearchO is the output for searching votes.
//
//     {
//         "object": [
//             {
//                 "intern": {
//                     "created": "1689001255",
//                     "id": "778237",
//                     "owner": "551265"
//                 },
//                 "public": {
//                     "claim": "778237",
//                     "kind": "stake",
//                     "option": "true",
//                     "value": "1.5"
//                 }
//             }
//         ]
//     }
//
message SearchO {
  SearchO_Filter filter = 100;
  repeated SearchO_Object object = 200;
}

message SearchO_Filter {}

message SearchO_Object {
  repeated SearchO_Object_Extern extern = 100;
  SearchO_Object_Intern intern = 200;
  SearchO_Object_Public public = 300;
}

message SearchO_Object_Extern {}

message SearchO_Object_Intern {
  // created is the unix timestamp in seconds at which this vote got created.
  string created = 100;
  // id is the ID of the vote object being searched.
  string id = 200;
  // owner is the ID of the user who created this vote.
  string owner = 300;
}

message SearchO_Object_Public {
  // claim is the ID of the referenced claim being voted on. Note that the
  // lifecycle of the referenced claim must be compliant with the vote kind
  // provided.
  string claim = 100;
  // kind is the type of vote, e.g. "stake" or "truth" on which a vote is cast.
  // Note that kind must be compliant with the lifecycle of the referenced
  // claim.
  //
  //     "stake" defines votes for users expressing their own opinions. A vote
  //     may have set kind "stake" to express opinions on claims of either kind
  //     "adjourn", "dispute", "nullify" or "propose".
  //
  //     "truth" defines votes for users verifying real world events. A vote may
  //     have set kind "stake" to verify real events on claims of kind
  //     "resolve".
  //
  string kind = 200;
  // option is the side of the vote being cast, e.g. "true" or "false". If
  // option is "true", then the vote is in agreement. If option is "false", then
  // the vote is in disagreement.
  string option = 300;
  // value is the weight of the vote being cast. If kind is "stake", then value
  // might be any positive number. If kind is "truth", then value must be 1.
  string value = 400;
}
