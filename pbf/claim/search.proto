syntax = "proto3";

package claim;
option go_package = "./;claim";

// SearchI is the input for searching claims.
//
//     {
//         "filter": {
//             "paging": {
//                 "kind": "page",
//                 "strt": "0",
//                 "stop": "49"
//             }
//         },
//         "object": [
//             {
//                 "public": {
//                     "cate": "863826"
//                 }
//             }
//         ]
//     }
//
message SearchI {
  SearchI_Filter filter = 100;
  repeated SearchI_Object object = 200;
}

message SearchI_Filter { SearchI_Filter_Paging paging = 100; }

message SearchI_Filter_Paging {
  string kind = 100;
  string strt = 200;
  string stop = 300;
}

message SearchI_Object {
  SearchI_Object_Intern intern = 100;
  SearchI_Object_Public public = 200;
  SearchI_Object_Symbol symbol = 300;
}

message SearchI_Object_Intern {
  // clam is the ID of the claim being searched. If searching for a particular
  // claim, the search query object must not contain any other fields.
  string clam = 100;
  // user is the ID of the user having created the claims being searched. If
  // searching for claims created by a particular user, the search query object
  // must not contain any other fields.
  string user = 200;
}

message SearchI_Object_Public {
  // cate is the ID of the category label for which claims are being searched.
  //
  // Providing multiple host and category labels within the same search query
  // object means to search for the intersection of all the given labels within
  // that search query context. That is, searching for { A, B, C } returns claim
  // objects that are associated to A, B and C.
  string cate = 100;
  // host is the ID of the host label for which claims are being searched.
  //
  // Providing multiple host and category labels within the same search query
  // object means to search for the intersection of all the given labels within
  // that search query context. That is, searching for { A, B, C } returns claim
  // objects that are associated to A, B and C.
  string host = 200;
}

message SearchI_Object_Symbol {
  // like set to any valid user ID returns the list of claims that the calling
  // user reacted to in the form of a like, within the specified boundaries of
  // filter.paging.strt and filter.paging.stop. The first paging pointer here is
  // the absolute lower boundary of the requested page, read min. The second
  // paging pointer here is the absolute upper boundary of the requested page,
  // read max.
  string like = 100;
  // list set to any valid list ID returns all of the claim objects matching the
  // provided list's criteria. Paging is available for paging kind page and
  // unix.
  string list = 200;
  // time set to a valid symbol or a unix time range returns the list of claims
  // known to happen within the specified boundaries. Note that the default
  // claim retention for past claims is one week. The premium subscriber claim
  // retention for past claims is three months.
  //
  //     time set to "dflt" returns the list of claims known to happen, or
  //     have happened, within the specified boundaries of filter.paging.strt
  //     and filter.paging.stop. The first paging pointer here is the unix
  //     timestamp in seconds of the lower boundary, read min. The second paging
  //     pointer here is the unix timestamp in seconds of the upper boundary,
  //     read max.
  //
  //     time set to "hpnd" returns the list of happened claims known to have
  //     already concluded within the past week.
  //
  //     time set to "upcm" returns the list of upcoming claims known to happen
  //     within the next week.
  //
  string time = 300;
}

// SearchO is the output for searching claims.
//
//     {
//         "object": [
//             {
//                 "extern": [
//                     {
//                         "amnt": "1047",
//                         "kind": "link",
//                         "user": true
//                     }
//                 ],
//                 "intern": {
//                     "crtd": "1689001255",
//                     "clam": "778237",
//                     "user": "551265"
//                 },
//                 "public": {
//                     "cate": "863826",
//                     "dura": "3600",
//                     "host": "233923",
//                     "link": "https://google.com",
//                     "time": "1689001255"
//                 }
//             },
//             ...
//         ]
//     }
//
message SearchO {
  SearchO_Filter filter = 100;
  repeated SearchO_Object object = 200;
}

message SearchO_Filter {}

message SearchO_Object {
  repeated SearchO_Object_Extern extern = 100;
  SearchO_Object_Intern intern = 200;
  SearchO_Object_Public public = 300;
}

message SearchO_Object_Extern {
  // amnt is the number of reactions this claim received for the specified kind.
  string amnt = 100;
  // kind is the type of reaction this claim received.
  //
  //     link for users clicking the claim link while the claim is happening
  //
  string kind = 200;
  // user expresses whether the calling user reacted to this claim with the
  // specified reaction kind.
  bool user = 300;
}

message SearchO_Object_Intern {
  // crtd is the unix timestamp in seconds at which the claim got created.
  string crtd = 100;
  // clam is the ID of the claim being searched.
  string clam = 200;
  // list is the ID of the list this claim belongs to, if any. Note that this
  // field will only be set when searching claims using symbol.list.
  string list = 300;
  // user is the ID of the user who created this claim.
  string user = 400;
}

message SearchO_Object_Public {
  // cate is the comma separated list of label IDs under which the claim is
  // categorized.
  string cate = 100;
  // dura is the estimated duration of the claim in seconds.
  string dura = 200;
  // host is the internal host ID expected to host the claim.
  string host = 300;
  // link is the online location at which the claim is expected to take place.
  // For IRL claims this may just be some informational website.
  string link = 400;
  // time is the unix timestamp in seconds at which the claim is expected to
  // start.
  string time = 500;
}
