syntax = "proto3";

package post;
option go_package = "./;post";

// CreateI is the input for creating posts.
//
//     {
//         "object": [
//             {
//                 "public": {
//                     "expiry": "1689001255",
//                     "kind": "claim",
//                     "lifecycle": "propose",
//                     "option": "true",
//                     "stake": "1.5",
//                     "text": "foo bar lorem ipsum",
//                     "token": "WETH"
//                 }
//             }
//         ]
//     }
//
message CreateI {
  CreateI_Filter filter = 100;
  repeated CreateI_Object object = 200;
}

message CreateI_Filter {}

message CreateI_Object {
  CreateI_Object_Intern intern = 100;
  CreateI_Object_Public public = 200;
}

message CreateI_Object_Intern {}

message CreateI_Object_Public {
  // expiry is the unix timestamp in seconds at which the post expires. Every
  // expiry marks the point in time at which a claim may transition into a new
  // lifecycle phase.
  string expiry = 100;
  // kind is the type of post, e.g. "claim" or "comment" on which reputation is
  // staked.
  string kind = 200;
  // lifecycle describes the evolutionary stage of a claim within its own tree.
  // Only posts of kind "claim" will have a lifecycle set.
  //
  //     "propose" describes claims that make any initial statement.
  //
  //     "resolve" describes claims that allow to verify the truth.
  //
  //     "dispute" describes claims that challenge any prior resolution.
  //
  //     "nullify" describes claims that question the verifiability of truth.
  //
  string lifecycle = 300;
  // option is the side of the bet taken with this post, e.g. "true" or "false".
  // If option is "true", then the staked reputation agrees with the given
  // statement. If option is "false", then the staked reputation disagrees with
  // the given statement.
  string option = 400;
  // parent is the post ID of any claim that references another claim within its
  // own tree. The first claim within a tree does not have a parent. If a post
  // is for instance of kind "claim" and has lifecycle "dispute", then parent
  // will reference the prior claim of kind "resolve" within their common tree,
  // because any dispute does always try to challange any prior resolution.
  string parent = 500;
  // stake is the amount of reputation staked.
  string stake = 600;
  // text is the human readable description the user provides in order to make a
  // statement, whether the post kind is "claim" or "comment". This text may be
  // provided in markdown format. This text might as be long as a common blog
  // post. This text might contain external links.
  string text = 700;
  // token is the token in which the staked reputation is denominated.
  string token = 800;
}

// CreateO is the output for creating posts.
//
//     {
//         "object": [
//             {
//                 "intern": {
//                     "created": "1689001255",
//                     "id": "778237"
//                 }
//             }
//         ]
//     }
//
message CreateO {
  CreateO_Filter filter = 100;
  repeated CreateO_Object object = 200;
}

message CreateO_Filter {}

message CreateO_Object {
  CreateO_Object_Intern intern = 100;
  CreateO_Object_Public public = 200;
}

message CreateO_Object_Intern {
  // created is the unix timestamp in seconds at which the post got created.
  string created = 100;
  // id is the ID of the post object being created.
  string id = 200;
}

message CreateO_Object_Public {}
