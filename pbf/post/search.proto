syntax = "proto3";

package post;
option go_package = "./;post";

// SearchI is the input for searching posts.
//
//     {
//         "filter": {
//             "paging": {
//                 "kind": "page",
//                 "start": "0",
//                 "stop": "49"
//             }
//         },
//         "object": [
//             {
//                 "intern": {
//                     "id": "778237"
//                 }
//             }
//         ]
//     }
//
message SearchI {
  SearchI_Filter filter = 100;
  repeated SearchI_Object object = 200;
}

message SearchI_Filter {
  SearchI_Filter_Paging paging = 100;
}

message SearchI_Filter_Paging {
  string kind = 100;
  string start = 200;
  string stop = 300;
}

message SearchI_Object {
  SearchI_Object_Intern intern = 100;
  SearchI_Object_Public public = 200;
  SearchI_Object_Symbol symbol = 300;
}

message SearchI_Object_Intern {
  // id is the ID of the post object being searched. If searching for a
  // particular ID, the search query object must not contain any other fields.
  string id = 100;
  // owner is the ID of the user having created the posts being searched. If
  // searching for posts created by a particular owner, the search query object
  // must not contain any other fields.
  string owner = 200;
  // tree set to any valid ID referring to a tree of claims returns all those
  // claims belonging to the same tree. There is no paging support since the
  // number of claims that any given tree may have is rather limited.
  string tree = 300;
}

message SearchI_Object_Public {
  // labels is the comma separated list of categories for which claims are being
  // searched. Providing multiple labels implies to search for the intersection
  // of all the given labels. That is, searching for { A, B, C } will only
  // return claim objects that are associated to A, B and C. In other words,
  // claims that are associated to A and B, but not to C, will not be returned
  // in the example above.
  string labels = 100;
}

message SearchI_Object_Symbol {
  // list set to any valid list ID returns all of the posts belonging to this
  // list. Paging is available for paging kind "page" and "unix".
  string list = 100;
  // time set to "latest" returns all posts in reverse chronological order.
  // Paging is available for paging kind "page" and "unix".
  string time = 200;
}

// SearchO is the output for searching posts.
//
//     {
//         "object": [
//             {
//                 "extern": [
//                     {
//                         "kind": "list",
//                         "user": true
//                     }
//                 ],
//                 "intern": {
//                     "created": "1689001255",
//                     "id": "778237"
//                     "owner": "551265",
//                     "tree": "487465725612222"
//                 },
//                 "public": {
//                     "expiry": "1689001255",
//                     "kind": "claim",
//                     "labels": "economy,inflation",
//                     "lifecycle": "propose",
//                     "stake": "10,2,1,1,4.843",
//                     "text": "foo bar lorem ipsum",
//                     "token": "WETH"
//                 }
//             }
//         ]
//     }
//
message SearchO {
  SearchO_Filter filter = 100;
  repeated SearchO_Object object = 200;
}

message SearchO_Filter {}

message SearchO_Object {
  repeated SearchO_Object_Extern extern = 100;
  SearchO_Object_Intern intern = 200;
  SearchO_Object_Public public = 300;
}

message SearchO_Object_Extern {
  // kind is the type of external action being tracked, e.g. "list" for users
  // adding this post of kind "claim" to one of their own lists.
  string kind = 100;
  // user expresses whether the calling user did the given external action
  // themselves. For instance, if kind equals "list" and user equals "true",
  // then the calling user added this post of kind "claim" to on of their own
  // lists.
  bool user = 200;
}

message SearchO_Object_Intern {
  // created is the unix timestamp in seconds at which this post got created.
  string created = 100;
  // id is the ID of the post object being searched.
  string id = 200;
  // owner is the ID of the user who created this post.
  string owner = 300;
  // tree is the internal list ID within which all referenced claims are grouped
  // together. Using this tree ID it is possible to search for all claims
  // belonging to the same lifecycle.
  string tree = 400;
}

message SearchO_Object_Public {
  // expiry is the unix timestamp in seconds at which the post expires. Every
  // expiry marks the point in time at which a claim may transition into a new
  // lifecycle phase.
  string expiry = 100;
  // kind is the type of post, e.g. "claim" or "comment" on which reputation is
  // staked.
  string kind = 200;
  // labels is a comma separated list of category labels that this claim is
  // related to.
  string labels = 300;
  // lifecycle describes the evolutionary stage of a claim within its own tree.
  // Only posts of kind "claim" will have a lifecycle set.
  //
  //     "adjourn" describes claims that defer claim resolution.
  //
  //     "propose" describes claims that make any initial statement.
  //
  //     "resolve" describes claims that allow to verify the truth.
  //
  //     "dispute" describes claims that challenge any prior resolution.
  //
  //     "nullify" describes claims that question the verifiability of truth.
  //
  string lifecycle = 400;
  // option is the side of the bet that the calling user took as market
  // participant if this is a post of kind "claim". If the caller did not
  // participate in this market, then option will be empty, given that the post
  // kind is "claim". If kind equals "comment", then option is the side of the
  // bet taken with this post regardless the caller. If option does equal "true"
  // and the post kind is "comment", then the staked reputation does agree with
  // the given statement. If option does equal "false" on the other hand, then
  // the staked reputation disagrees with the given statement.
  string option = 500;
  // stake is the amount of reputation staked. If kind equals "claim", then
  // stake might be a comma separated string of token denominated values in the
  // format "agreement,disagreement,minimum,initial,user".
  //
  //     "agreement" will represent all reputation staked in agreement with the
  //     given statement.
  //
  //     "disagreement" will represent all reputation staked in disagreement
  //     with the given statement.
  //
  //     "minimum" will represent the minimum amount of reputation that must be
  //     staked when participating in this market.
  //
  //     "initial" will represent the initial amount of reputation that the
  //     proposing user staked when creating this market.
  //
  //     "user" will represent the amount of staked reputation belonging to the
  //     calling user, if said user did in fact participate in the given market.
  //
  string stake = 600;
  // parent is the post ID of any claim that references another claim within its
  // own tree. The first claim within a tree does not have a parent. If a post
  // is for instance of kind "claim" and has lifecycle "dispute", then parent
  // will reference the prior claim of kind "resolve" within their common tree,
  // because any dispute does always try to challange any prior resolution.
  string parent = 700;
  // text is the human readable description the user provides in order to make a
  // statement whether kind equals "claim" or "comment". This text may be
  // provided in markdown format. This text might be as long as a common blog
  // post. This text might contain external links.
  string text = 800;
  // token is the token in which the staked reputation is denominated.
  string token = 900;
}
