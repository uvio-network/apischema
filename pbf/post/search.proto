syntax = "proto3";

package post;
option go_package = "./;post";

// SearchI is the input for searching posts.
//
//     {
//         "filter": {
//             "paging": {
//                 "kind": "page",
//                 "start": "0",
//                 "stop": "49"
//             }
//         },
//         "object": [
//             {
//                 "intern": {
//                     "id": "778237"
//                 }
//             }
//         ]
//     }
//
message SearchI {
  SearchI_Filter filter = 100;
  repeated SearchI_Object object = 200;
}

message SearchI_Filter {
  SearchI_Filter_Paging paging = 100;
}

message SearchI_Filter_Paging {
  string kind = 100;
  string start = 200;
  string stop = 300;
}

message SearchI_Object {
  SearchI_Object_Intern intern = 100;
  SearchI_Object_Public public = 200;
  SearchI_Object_Symbol symbol = 300;
}

message SearchI_Object_Intern {
  // id is the ID of the post object being searched. If searching for a
  // particular ID, the search query object must not contain any other fields.
  string id = 100;
  // owner is the ID of the user having created the posts being searched. If
  // searching for posts created by a particular owner, the search query object
  // must not contain any other fields.
  string owner = 200;
  // tree set to any valid ID referring to a tree of claims returns all those
  // claims belonging to the same tree. There is no paging support since the
  // number of claims that any given tree may have is rather limited.
  string tree = 300;
}

message SearchI_Object_Public {
  // labels is the comma separated list of categories for which claims are being
  // searched. Providing multiple labels implies to search for the intersection
  // of all the given labels. That is, searching for { A, B, C } will only
  // return claim objects that are associated to A, B and C. In other words,
  // claims that are associated to A and B, but not to C, will not be returned
  // in the example above.
  string labels = 100;
  // lifecycle is the lifecycle phase to search specific claims for. For
  // instance, if lifecycle is set to "dispute", all claims known to be disputes
  // will be returned.
  string lifecycle = 200;
}

message SearchI_Object_Symbol {
  // list set to any valid list ID returns all of the posts belonging to this
  // list. Paging is available for paging kind "page" and "unix".
  string list = 100;
  // time set to "latest" returns all posts in reverse chronological order.
  // Paging is available for paging kind "page" and "unix".
  string time = 200;
  // vote is the ID of the user having voted on the claims to search. vote set
  // to "self" returns the claims voted on by the current user sending the
  // request, based on the given authorization parameters. Given an OAuth access
  // token, its encoded subject claim may refer to the internally persisted user
  // object.
  string vote = 300;
}

// SearchO is the output for searching posts.
//
//     {
//         "object": [
//             {
//                 "intern": {
//                     "created": "1689001255",
//                     "id": "778237",
//                     "owner": "551265",
//                     "tree": "487465725612222"
//                 },
//                 "public": {
//                     "chain": "421614",
//                     "expiry": "1689001255",
//                     "hash": "0x1234",
//                     "kind": "claim",
//                     "labels": "economy,inflation",
//                     "lifecycle": "propose",
//                     "meta": "9,0",
//                     "text": "foo bar lorem ipsum",
//                     "token": "WETH",
//                     "votes": "10,2,1,4.843"
//                 }
//             }
//         ]
//     }
//
message SearchO {
  SearchO_Filter filter = 100;
  repeated SearchO_Object object = 200;
}

message SearchO_Filter {}

message SearchO_Object {
  SearchO_Object_Extern extern = 100;
  SearchO_Object_Intern intern = 200;
  SearchO_Object_Public public = 300;
}

message SearchO_Object_Extern {}

message SearchO_Object_Intern {
  // created is the unix timestamp in seconds at which this post got created.
  string created = 100;
  // id is the ID of the post object being searched.
  string id = 200;
  // owner is the ID of the user who created this post.
  string owner = 300;
  // tree is the internal list ID within which all referenced claims are grouped
  // together. Using this tree ID it is possible to search for all claims
  // belonging to the same lifecycle.
  string tree = 400;
}

message SearchO_Object_Public {
  // chain is the chain ID on which a claim got proposed. This field must be
  // empty for posts of kind "comment".
  string chain = 100;
  // expiry is the unix timestamp in seconds at which the post expires. Every
  // expiry marks the point in time at which a claim may transition into a new
  // lifecycle phase.
  string expiry = 200;
  // hash is the onchain transaction hash if post kind is "claim". Hash must be
  // empty for comments. Setting hash implies that the claim got confirmed
  // onchain, and with it the lifecycle phase "propose" will be inferred
  // automatically.
  string hash = 300;
  // kind is the type of post, e.g. "claim" or "comment" on which reputation is
  // staked.
  string kind = 400;
  // labels is a comma separated list of category labels that this claim is
  // related to.
  string labels = 500;
  // lifecycle describes the desired lifecycle phase of a claim within its own
  // tree. Only posts of kind "claim" will have a lifecycle phase set. All
  // claims start with the interim lifecycle phase "pending". Those pending
  // claims were posted offchain, but have not yet been confirmed onchain. Once
  // claims have been confirmed onchain the claim's desired lifecycle phase will
  // be set as provided.
  //
  //     "adjourn" describes claims that defer claim resolution.
  //
  //     "dispute" describes claims that challenge any prior resolution.
  //
  //     "nullify" describes claims that question the verifiability of truth.
  //
  //     "propose" describes claims that make any initial statement.
  //
  //     "resolve" describes claims that allow to verify the truth.
  //
  string lifecycle = 600;
  // meta may contain onchain specific meta data like tree ID and claim ID as
  // tracked by a smart contract.
  string meta = 700;
  // parent is the post ID of any claim that references another claim within its
  // own tree. The first claim within a tree does not have a parent. If a post
  // is for instance of kind "claim" and has lifecycle "dispute", then parent
  // will reference the prior claim of kind "resolve" within their common tree,
  // because any dispute does always try to challange any prior resolution.
  string parent = 800;
  // text is the human readable description the user provides in order to make a
  // statement whether kind equals "claim" or "comment". This text may be
  // provided in markdown format. This text might be as long as a common blog
  // post. This text might contain external links.
  string text = 900;
  // token is the token in which the staked reputation is denominated.
  string token = 1000;
  // votes is the summary of votes cast in relation to the referenced claim. If
  // kind equals "claim" and lifecycle is one of "adjourn", "dispute", "nullify"
  // or "propose", then votes may be a comma separated string of information
  // about staked reputation in the following format.
  //
  //     "agreement,disagreement,minimum,creator"
  //
  // If kind equals "claim" and lifecycle is "resolve", then votes may be a
  // comma separated string of information about verified events in the
  // following format. Any permutation of votes may be possible, e.g. "10,0",
  // "0,8", "8,4", "9,9" etc.
  //
  //     "agreement,disagreement"
  //
  // If kind equals "comment" and the lifecycle of the parent claim is one of
  // "adjourn", "dispute", "nullify" or "propose", then votes may be a comma
  // separated string of information about the reputation that the commenting
  // user staked on the parent claim, in the following format. While most
  // reputation staked may only take one side, any permutation of tokens may be
  // possible, e.g. "0.5,0", "0,3", "2,0.02".
  //
  //     "agreement,disagreement"
  //
  // If kind equals "comment" and the lifecycle of the parent claim is
  // "resolve", then votes may be a comma separated string of information about
  // the events that the commenting user verified on the parent claim, in the
  // following format. Comments must only have a single voice on either side,
  // e.g. "1,0", "0,1".
  //
  //     "agreement,disagreement"
  //
  // Further, the votes summary provides contextual information for the claim or
  // comment at hand. The following definitions may apply respectively.
  //
  //     "agreement" represents all votes cast in agreement with the given
  //     statement. The values here may be the amount of tokens or the amount of
  //     voices that either expressed opinions or verified the truth.
  //
  //     "disagreement" represents all votes cast in disagreement with the given
  //     statement. The values here may be the amount of tokens or the amount of
  //     voices that either expressed opinions or verified the truth.
  //
  //     "minimum" represents the minimum amount of reputation that must be
  //     staked when participating in this market. This value does neither apply
  //     to comments nor to resolutions.
  //
  //     "creator" represents the amount of staked reputation belonging to the
  //     user who created the claim on which opinions have to be expressed.
  //     This value does neither apply to comments nor to claims of lifecycle
  //     "resolve".
  //
  string votes = 1100;
}
